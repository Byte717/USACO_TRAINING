1.Concept
- Know your Topic


2.Framework
- Ask questions on what might be able to solve this problem
- Try different things and don't get stuck on one idea

3.Form
-After you identify the topic, each topic can be broken into solving a couple different types of problems
- Find those "Forms" decide which one to use


4. Tactic
- Important ideas you need to know to solve a problem with a certain form and framework
- Important optimizations with implementation

---------------------------------------------------------------------------------------------------------------------


WITH EVERY PROBLEM,ONE NEW THING SHOULD BE ADDED TO YOUR KNOWLEDGE AS ONE OF THE MENTIONED BEFORE.


What I learned? Vampiric Powers 
- boolean arrays can be used to speed up the solution (tactic)
- Concept: Xor ranges
    - Intersections of ranges cancel out


What I learned: TenzingBalls
- instead of dp[i][j], you can break it into 2 separate arrays to speed up the time
- you can use inverse counting, dont count the answer, count n-ans

What I learned charBlock: 
-string hashing
-Queues can be used for queries that last for a time


WHat I Learned Flipper:
- Put bigger values first to maximize lexographical order

What I learned Contrast Value:
-For minimizing, considering greedily what can be removed
-Use a condition, like in dp

What i learned Array Painting:
- when counting a solution, think of how you can earn just 1 of something
- like in this problem, how can you use 1 coin to maximize numbers painted
- Segment the input into different pieces

What I learned Bracket Coloring:
- Greedy involves grouping your input

WHat I learned Freedom:
    - For divisibility problems, check the divisors of the number

What I learned Drawing Trees:
- find how to optimize problems with using base cases for what is visited
- like id represents 0 if the node was not added